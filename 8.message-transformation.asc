= Chapter8. Message Transformation

4장 "Messaging with Actors"에서 전반적인 주제의 "Message Translator에 대해서 논의했었다. 이 장에서는 메시지의 다양한 종류의 변환에 대해서 주의 깊게 살펴보자.

* Envelop Wrapper: 전형적인 미들웨어 메시징 시스템에서는 속성을 표준화를 위한 별개의 메시지 헤더가 있다. 액터 모델, 아카는 특히 메시지 헤더를 지원하지 않는다. 그렇지만 메시지 헤더를 흉내내는 것과 같은 envelop-type 구조로 메시지를 포장하고 싶을 수도 있다. Envelop Wrapper는 어떤 명시된 애플리케이션 기능을 수행하기 위해 호출된다. (; Channel Adpter, Message Router, Request-Reply communication)

* Content Enricher: 여러분의 액터 시스템이 integrator에게 메시지를 보낼 때 여러분의 내부적인 메시지 타입이 다른 시스템이 메시지를 소모하기에 충분히 rich하지 않을 수 있다. 이럴때 주어진 메시지를 강화하기(fortify) 위해 Content Enricher를 사용할 수 있고, 그래서 특정 Datatype Channel에 의해 소비되도록 할 수 있다.

* Content Filter: Content Enricher와는 반대로 Content Filter는 메시지의 특정 정보를 제거한다. 이는 전체 메시지를 정리하는 Message Filter와는 다르다. 반면에 이런 종류의 필터는 외부로 노출되기에 아주 민감한 메시지이기 때문에 전체 메시지의 내용을 삭제할 책임이 있다.

* Claim Check: 요구에 따라서 일정 부분만 접근하도록 하면서 혼합된 메시지를 작게 분해할 필요가 있을 때 Claim Check를 사용할 수 있다.

* Normalizer: Normalizer는 어떤 제약사항도 없는(no-holds-barred) 변환기이다. 여러분의 시스템이 메시지를 받을 때 메시지가 지원되는 타입이 아니거나 메시지를 지원이 가능한 것으로 변환할 필요가 있을 때 사용되곤 한다.

* Canonical Message Model: 여러분의 엔터프라이즈에 몇몇 애플리케이션에서 각각을 통합할 때 이 패턴을 사용할 수 있다. 예를들어 5~7개 혹은 그 이상의 각각에게 메시지를 모두 보내는 애플리케이션이 있다면, 모든 애플리케이션이 공유를 위한 메시지의 공통 셋을 만들기 위해 Canonical Message Model을 사용할 수 있다.


==== Envelope Wrapper

일전에 Return Address를 액터 모델에 사용하는 몇몇 방법을 설명하였는데, 액터 스스로 reply-to-actor 하게 하는게 더 좋은 방법이다 이를 Envelop Wrapper로 할 수 있다.

생각해보자. 예를들어 원본 메시지가 시스템으로 들어가지만 기반 메시지 타입이 어떤 한 액터에 의해 원천적으로 지원되지 않는 것이라면, envelop을 incompatible 메시지처럼 감쌀 수 있다. 이렇게 해서 무엇을 달성할 수 있을까?

* envelope은 원본 메시지에서 액터가 지원하는 메시지 타입으로 GoF Adapter처럼 사용할 수 있을 것이다.
* 원본 시스템의 "actor"와 로컬 시스템 액터의 인터랙션의 복잡성을 효과적으로 감소시킬 수 있다.

image::https://raw.githubusercontent.com/kpug/akka-eip/master/img/8-1.jpeg[Envelop Wrapper]

[source,scala]
----
trait ReplyToSupport {
  def reply(message: Any) = {}
  def setUpReplyToSupport(returnAddress: String) = {}
}

trait RabbitMQReplyToSupport extends ReplyToSupport {
  override def reply(message: Any) = {
    ...
  }
  override def setUpReplyToSupport(returnAddress: String) = {
    ...
  }
}

trait RegisterCustomer {
  ...
}

case class RegisterCustomerRabbitMQReplyToMapEnvelope( mapMessage: Map[String, String])
    extends RegisterCustomer with RabbitMQReplyToSupport {

      this.setUpReplyToSupport(mapMessage("returnAddress"))

}

...

val mapMessage = receivedMessageAsMap(wireMessage)
val registerCustomer = RegisterCustomerRabbitMQReplyToMapEnvelope(mapMessage)

customerRegistrar ! registerCustomer
----


[source,scala]
----
class CustomerRegistrar extends Actor {
  def receive = {
    case registerCustomer: RegisterCustomer =>
      ...
      registerCustomer.reply(CustomerRegistered(...))
    case _ =>
      ...
  }
}
----

This is not the only use of an Envelope Wrapper, but it’s one way to ease the tension
between disparate systems and messages of varying types.

==== Content Enricher

Envelop Wrapper로 외부 시스템으로 부터 온 양립할 수 없는 메시지를 액터 시스템에서 공존할 수 있게 만들었다. 그러나 여전히 외부 시스템은 필요한 더 많은 정보를 retrieve할 수 없다. 이럴때 Content Enricher를 사용하자.

image::https://raw.githubusercontent.com/kpug/akka-eip/master/img/8-2.jpeg[Content Enricher]

[source,scala]
----
package co.vaughnvernon.reactiveenterprise.contentenricher

import akka.actor._
import co.vaughnvernon.reactiveenterprise._
import java.util.Date

case class DoctorVisitCompleted(
  val patientId: String,
  val firstName: String,
  val date: Date,
  val patientDetails: PatientDetails) {

    def this(patientId: String,
      firstName: String,
      date: Date) = {
        this(patientId, firstName, date,
      PatientDetails(null, null, null))
      }

      def carrier = patientDetails.carrier
      def lastName = patientDetails.lastName
      def socialSecurityNumber = patientDetails.socialSecurityNumber
  }

case class PatientDetails(
  val lastName: String,
  val socialSecurityNumber: String,
  val carrier: String)

case class VisitCompleted(dispatcher: ActorRef)

object ContentEnricherDriver extends CompletableApp(3) {

  val accountingSystemDispatcher = system.actorOf(
    Props[AccountingSystemDispatcher], "accountingSystem")

  val accountingEnricherDispatcher = system.actorOf(
    Props(new AccountingEnricherDispatcher( accountingSystemDispatcher)),
      "accountingDispatcher")

  val scheduledDoctorVisit = system.actorOf(
    Props(new ScheduledDoctorVisit("123456789", "John")), "scheduledVisit")

  scheduledDoctorVisit ! VisitCompleted(accountingEnricherDispatcher)

  awaitCompletion
  println("ContentEnricher: is completed.")
}

class AccountingEnricherDispatcher(val accountingSystemDispatcher: ActorRef) extends Actor {

  def receive = {
    case doctorVisitCompleted: DoctorVisitCompleted =>
      println("AccountingEnricherDispatcher: "
        + "querying and forwarding.")
      // query the enriching patient information...
      // ...
      val lastName = "Doe"
      val carrier = "Kaiser"
      val socialSecurityNumber = "111-22-3333"
      val enrichedDoctorVisitCompleted =
        DoctorVisitCompleted(
          doctorVisitCompleted.patientId,
          doctorVisitCompleted.firstName,
          doctorVisitCompleted.date,
          PatientDetails( lastName, socialSecurityNumber, carrier))

          accountingSystemDispatcher forward enrichedDoctorVisitCompleted
          ContentEnricher.completedStep
    case _ =>
      println("AccountingEnricherDispatcher: unexpected")
  }
}

class AccountingSystemDispatcher extends Actor {
  def receive = {
    case doctorVisitCompleted: DoctorVisitCompleted =>
      println("AccountingSystemDispatcher: "
        + "sending to Accounting System...")

      ContentEnricher.completedStep
    case _ =>
      println("AccountingSystemDispatcher: unexpected")
  }
}

class ScheduledDoctorVisit(
  val patientId: String, val firstName: String)
    extends Actor {
      var completedOn: Date = _

      def receive = {
        case visitCompleted: VisitCompleted =>
          println("ScheduledDoctorVisit: completing visit.")
          completedOn = new Date()

          visitCompleted.dispatcher ! new DoctorVisitCompleted( patientId,
            firstName, completedOn)

          ContentEnricher.completedStep

        case _ =>
          println("ScheduledDoctorVisit: unexpected")
      }
}
----

결과는 다음과 같다.

....
ScheduledDoctorVisit: completing visit.
AccountingEnricherDispatcher: querying and forwarding.
AccountingSystemDispatcher: sending to Accounting System...
ContentEnricher: is completed
....


* Immutable DoctorVisitCompleted *

DoctorVisitCompleted를 immutable하게 설계하는 것은 좋은 생각이다. Domain Event는 immutable할 필요가 있고, DoctorVisitCompleted는 Event Message이다.
DoctorVisitCompleted는 2개의 constructors로 설계되었다 하나는 지역 속성이고 다른 하나는 또한 완전한 PatientDetails이다. 이는 ScheduledDoctorVisit가 마지막 메시지 타입을 dispatch하는 것을 허락하면서 가능한한 최소한의 정보만 있으면 된다.

* Should the AccountingEnricherDispatcher Be Local?*

AccountingEnricherDispatcher가 스케쥴러 시스템에 반영될 필요가 있을까? 때에 따라 다르다. 보아하니 EIP에서 이 액터를 커스터머 케어 시스템에 의존할 필요가 없다는 논쟁 때문에 스케줄러 외부에 넣으려고 했다.
따라서 AccountingEnricherDispatcher는 remote 액터이다. 반면에 여러분들은 AccountingEnricherDispatcher가 self-contained actor로 어떤 타당한 시스템에 배포 될거라 생각했을 것이다.

==== Content Filter

You used the envelope to both adapt the external message to one locally acceptable, and you also designed the envelope to reply to the originating external system.

Content Enricher (317) to augment your local message with more information needed by an external system before the message is sent to it.

아래와 같은 상황에서 Content Filter를 사용할 수 있다.

* 지역 애플리케이션 특화된 쿼리가 수행될 때 데이터베이스로부터 쉽게 데이터를 얻을 수 있다. (Yet, the rich amount of data may be too sensitive to send to
outside systems.)
* 조회된 지역 애플리케이션 데이터가 네트워크를 통해서 전송되기에 현실적으로 너무 크고, 대부분이 소비자와 지역 액터에 불필요하다.
* 수 많은 데이터 뿐만 아니라 지역 액터와 remote systems에서 소비하기에 구조가 너무 복잡하다.

[source,scala]
----
package co.vaughnvernon.reactiveenterprise.contentfilter

import akka.actor._
import co.vaughnvernon.reactiveenterprise.CompletableApp

case class FilteredMessage(
  light: String,
  and: String,
  fluffy: String,
  message: String) {
    override def toString = { s"FilteredMessage(" + light + " " + and + " "
      + fluffy + " " + message + ")"
    }
  }

case class UnfilteredPayload(largePayload: String)

object ContentFilter extends CompletableApp(3) {
  val messageExchangeDispatcher = system.actorOf(
    Props[MessageExchangeDispatcher], "messageExchangeDispatcher")

  messageExchangeDispatcher ! UnfilteredPayload( "A very large message with complex structure...")

  awaitCompletion
  println("RequestReply: is completed.")
}

class MessageExchangeDispatcher extends Actor {

  val messageContentFilter =

  context.actorOf( Props[MessageContentFilter], "messageContentFilter")

  def receive = {
    case message: UnfilteredPayload =>
      println("MessageExchangeDispatcher: " + "received unfiltered message: "
        + message.largePayload)

      messageContentFilter ! message
      ContentFilter.completedStep

    case message: FilteredMessage =>
      println("MessageExchangeDispatcher: dispatching: " + message)
      ContentFilter.completedStep
    case _ =>
      println("MessageExchangeDispatcher: unexpected")
  }
}

class MessageContentFilter extends Actor {
  def receive = {
    case message: UnfilteredPayload =>
      println("MessageContentFilter: " + "received unfiltered message: "
        + message.largePayload)
      // filtering occurs...
      sender ! FilteredMessage( "this", "feels", "so", "right")
      ContentFilter.completedStep
    case _ =>
      println("MessageContentFilter: unexpected")
  }
}
----

결과는 다음과 같다.

....
MessageExchangeDispatcher: received unfiltered message:
  A very large message with complex structure...
MessageContentFilter: received unfiltered message: A very
  large message with complex structure...
MessageExchangeDispatcher: dispatching: FilteredMessage(
  this feels so right)
RequestReply: is completed.
....
